package com.example.juncookapp.logic.JunCookMediaimport android.content.ContentUrisimport android.content.Contextimport android.database.Cursorimport android.os.Buildimport android.provider.MediaStoreimport androidx.core.database.getLongOrNullimport androidx.core.database.getStringOrNullimport dagger.hilt.android.qualifiers.ApplicationContextimport timber.log.Timberimport javax.inject.Injectclass LoadFilesRepository @Inject constructor(    @ApplicationContext private val context: Context,    private val appDatabase: AppDatabase,) {    suspend fun loadAllFilesToDatabase() {        val mediaItems: MutableList<String> = mutableListOf()        val cursor = getAllMediaFilesCursor()        if (true == cursor?.moveToFirst()) {            val idCol = cursor.getColumnIndexOrThrow(MediaStore.Files.FileColumns._ID)            val pathCol = cursor.getColumnIndex(MediaStore.Files.FileColumns.DATA)            val nameCol = cursor.getColumnIndex(MediaStore.Files.FileColumns.DISPLAY_NAME)            val dateCol = cursor.getColumnIndex(MediaStore.Files.FileColumns.DATE_MODIFIED)            val mimeType = cursor.getColumnIndex(MediaStore.Files.FileColumns.MIME_TYPE)            val sizeCol = cursor.getColumnIndex(MediaStore.Files.FileColumns.SIZE)            do {                val id = cursor.getLong(idCol)                val path = cursor.getStringOrNull(pathCol) ?: continue                val name = cursor.getStringOrNull(nameCol) ?: continue                val dateTime = cursor.getLongOrNull(dateCol) ?: continue                val type = cursor.getStringOrNull(mimeType) ?: continue                val size = cursor.getLongOrNull(sizeCol) ?: continue                val contentUri = ContentUris.appendId(                    MediaStore.Files.getContentUri("external").buildUpon(),                    id                ).build()                val file = appDatabase.fileDao().loadById(id)                val fileEntity = FileEntity(                    id = id,                    path = path,                    uri = contentUri.toString(),                    name = name,                    dateTime = dateTime,                    mimeType = type,                    size = size,                    bookmarked = if (file.isEmpty()) false else file.first().bookmarked,                )                appDatabase.fileDao().insert(fileEntity)                val media =                    "Uri:$contentUri,\nPath:$path,\nFileName:$name,\nFileSize:$size,\nDate:$dateTime,\ntype:$type"                Timber.d("Media: $media")                mediaItems.add(media)            } while (cursor.moveToNext())        }        cursor?.close()    }    /**     * Returns a cursor pointing to each image/video file in the system     */    private fun getAllMediaFilesCursor(): Cursor? {        val projections =            arrayOf(                MediaStore.Files.FileColumns._ID,                MediaStore.Files.FileColumns.DATA, //TODO: Use URI instead of this.. see official docs for this field                MediaStore.Files.FileColumns.DISPLAY_NAME,                MediaStore.Files.FileColumns.DATE_MODIFIED,                MediaStore.Files.FileColumns.MIME_TYPE,                MediaStore.Files.FileColumns.SIZE            )        val sortBy = "${MediaStore.Files.FileColumns.DATE_MODIFIED} DESC"        val selectionArgs =            FileTypes.values().map { it.mimeTypes }.flatten().filterNotNull().toTypedArray()        val args = selectionArgs.joinToString {            "?"        }        val selection =            MediaStore.Files.FileColumns.MIME_TYPE + " IN (" + args + ")"        val collection = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            MediaStore.Files.getContentUri(MediaStore.VOLUME_EXTERNAL)        } else {            MediaStore.Files.getContentUri("external")        }        return context.contentResolver.query(            collection,            projections,            selection,            selectionArgs,            sortBy        )    }}